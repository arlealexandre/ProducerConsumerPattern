╔═══════════════════════════╦═════════════════════╦═══════════════════════╦═══════════════════════════════════════════════════════════════════════════════╦═════════════════════════════════╗
║ Methode                   ║     PreAction       ║        Garde          ║                              PostAction                                       ║              Garde              ║                   
╠═══════════════════════════╬═════════════════════╬═══════════════════════╬═══════════════════════════════════════════════════════════════════════════════╬═════════════════════════════════╣
║ Produce(Message m, int n) ║                     ║    nbMessage+n<size   ║ for (int i=0; i<n; i++) { buff[in] = m ; nbMessage++ ; in = (in+1) mod size } ║         m.isConsumed()          ║
╠═══════════════════════════╬═════════════════════╬═══════════════════════╬═══════════════════════════════════════════════════════════════════════════════╬═════════════════════════════════╣
║ Message Consume()         ║                     ║     nbMessage!=0      ║            res= buff[out] ; nbMessage-- ; out = (out+1) mod size              ║        res.isConsumed()         ║
╚═══════════════════════════╩═════════════════════╩═══════════════════════╩═══════════════════════════════════════════════════════════════════════════════╩═════════════════════════════════╝